{<img src="https://badge.fury.io/rb/spamtrap.png" alt="Gem Version" />}[http://badge.fury.io/rb/spamtrap]
{<img src="https://secure.travis-ci.org/cedric/spamtrap.png?branch=master" alt="Build Status" />}[https://travis-ci.org/cedric/spamtrap]

== Spamtrap

This is a simple {spamtrap}[http://en.wikipedia.org/wiki/Spamtrap] to fight {spamdexing}[http://en.wikipedia.org/wiki/Spamdexing]. You can create bogus form fields ({honeypots}[http://en.wikipedia.org/wiki/Honeypot_%28computing%29]) that will be filled-in by spambots. When these forms are submitted, the content will be discarded while still returning a 200 response.

=== Installation

In Rails 2.3, add the following to your environment.rb:

  config.gem 'spamtrap'

In Rails 3 (or if using Bundler), add the following to your Gemfile:

  gem 'spamtrap'

=== Example

Declare the controller actions you want the spamtrap enabled for:

  class CommentsController < ApplicationController
    spamtrap [:create, :update], :sarah_palin_walks_with_dinosaurs
  end

In your views, add a call to the "spamtrap" form builder to your forms to output the honeypot fields:

  - form_for @comment do |f|
    = f.spamtrap :sarah_palin_walks_with_dinosaurs, :class => 'reindeer_jerky'
    %fieldset
      = f.label :body, "Post Comment"
      = f.text_area :body
    = f.submit

Now you just need to hide the spamtrap from your real users by adding this to your CSS:

  .reindeer_jerky { display: none; }

The spamtrap mix-in can also take an optional block, where you can do more advance things -- like swapping the honeypot with a real form parameter.

=== To Do

- Add a cryptographic nonce to prevent replay attacks. It would probably be an MD5 hash consisting of a timestamp, ip address and secret. The timeout would be configurable.
- Write some tests. Ack!

=== License

(The MIT License)

Copyright (c) 2010 Cedric Howe

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

